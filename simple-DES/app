#!/usr/bin/env python
from sdes import Cipher, init as initSDES
from argparse import ArgumentParser
from sys import stdout

def bytesFromFile(filename, chunksize=4096):
    with open(filename, 'rb') as f:
        while True:
            chunk = f.read(chunksize)
            if chunk:
                yield chunk
            else:
                break

cli = ArgumentParser(description='Encripta una imagen utilizando S-DES')
cli.add_argument('imagen', help='ruta de la imagen')
cli.add_argument('clave', help='clave de 10-bit (base 2)')
cli.add_argument('--out', help='salida del programa')
actions = cli.add_mutually_exclusive_group(required=True)
actions.add_argument('--enc', help='encriptar', action='store_true')
actions.add_argument('--dec', help='desencriptar', action='store_true')
args = cli.parse_args()

try:
    key = int(args.clave, 2)
    initSDES()
    cipher = Cipher(key)
except:
    print('error: la clave no es una cadena binaria')
    exit(1)
if (key > 0x3FF):
    print('error: la clave debe ser de 10-bit')

out = stdout.buffer
if (args.out and args.out !='-'):
    out = open(args.out, mode='wb')

for chunk in bytesFromFile(args.imagen):
    chunk = list(chunk)
    for i in range(0, len(chunk)):
        if (args.enc):
            chunk[i] = cipher.encrypt(chunk[i])
        else:
            chunk[i] = cipher.decrypt(chunk[i])
    out.write(bytes(chunk))
out.close()
